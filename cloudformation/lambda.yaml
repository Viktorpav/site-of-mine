AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy lambda function for static site

Parameters:
  DomainName:
    Type: String
  Prefix:
    Type: String

Resources:
  TranscodeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3PermissionsLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DomainName}/*"

  FFmpegLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${Prefix}-FFmpegLayer"
      Content:
        S3Bucket: !Sub "${DomainName}"
        S3Key: lambda-layers/ffmpeg-layer.zip
      CompatibleRuntimes:
        - python3.10
      CompatibleArchitectures:
        - arm64

  FFmpegLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      LayerVersionArn: !Ref FFmpegLayer
      Action: lambda:GetLayerVersion
      Principal: "*"

  TranscodeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Prefix}-transcode-function"
      Code:
        ZipFile: |
          import boto3
          import subprocess

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              # Get the object from the event and show its content type
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              response = s3.get_object(Bucket=bucket, Key=key)
              content_type = response['ContentType']

              # Use FFmpeg to transcode the video
              input_path = f's3://{bucket}/{key}'
              output_path = f's3://{bucket}/transcoded/{key}'
              subprocess.run(['ffmpeg', '-i', input_path, '-c:v', 'libx264', '-preset', 'slow', '-crf', '22', '-c:a', 'copy', output_path])

      Handler: index.lambda_handler
      Runtime: python3.10
      Architectures:
        - arm64
      Timeout: 60
      Role: !GetAtt TranscodeFunctionRole.Arn
      Layers:
        - !Ref FFmpegLayer

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TranscodeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${DomainName}"
      SourceAccount: !Ref AWS::AccountId

  # For S3 bucket triggering
  S3BucketNotification:
    Type: AWS::S3::BucketNotificationConfiguration
    Properties:
      #Bucket: !Ref S3Bucket
      Bucket: !Sub "${DomainName}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !Ref TranscodeFunction
            Filter:
              S3Key:
                Rules:
                  - Name: Suffix
                    Value: ".mp4"
