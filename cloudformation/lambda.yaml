AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy lambda function for static site

Parameters:
  DomainName:
    Type: String
  Prefix:
    Type: String

Resources:
  TranscodeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3PermissionsLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DomainName}/*"

  FFmpegLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${Prefix}-FFmpegLayer"
      Content:
        S3Bucket: !Sub "${DomainName}"
        S3Key: lambda-layers/ffmpeg-layer.zip
      CompatibleRuntimes:
        - python3.10
      CompatibleArchitectures:
        - arm64

  FFmpegLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      LayerVersionArn: !Ref FFmpegLayer
      Action: lambda:GetLayerVersion
      Principal: "*"

  TranscodeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Prefix}-transcode-function"
      Code:
        ZipFile: |
          import boto3
          import os
          import subprocess

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              # Get the object from the event and show its content type
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              download_path = '/tmp/{}'.format(os.path.basename(key))
              upload_path = '/tmp/converted-{}'.format(os.path.splitext(os.path.basename(key))[0] + '.mp4')

              # Download the video file from S3 to the Lambda function's temp storage
              s3.download_file(bucket, key, download_path)
              
              # Use FFmpeg to convert the video to mp4 format
              command = ['/opt/bin/ffmpeg', '-i', download_path, '-vcodec', 'libx264', '-acodec', 'aac', '-crf', '23', '-profile:v', 'high', '-y', upload_path]
              
              try:
                  output = subprocess.check_output(command, stderr=subprocess.STDOUT)
                  print(f"FFmpeg output: {output}")
              except subprocess.CalledProcessError as e:
                  print(f"FFmpeg failed with return code {e.returncode} and output:\n{e.output}")
                  raise e

              # Upload the converted video back to S3
              converted_key = 'converted/{}'.format(os.path.splitext(os.path.basename(key))[0] + '.mp4') if 'converted' not in key else key
              s3.upload_file(upload_path, bucket, converted_key)

      Handler: index.lambda_handler
      Runtime: python3.10
      Architectures:
        - arm64
      Timeout: 900
      MemorySize: 2048
      Role: !GetAtt TranscodeFunctionRole.Arn
      Layers:
        - !Ref FFmpegLayer

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TranscodeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${DomainName}"
      SourceAccount: !Ref AWS::AccountId

Outputs:
  TranscodeFunctionArn:
    Value: !GetAtt TranscodeFunction.Arn
    Export:
      Name: TranscodeFunctionArn
