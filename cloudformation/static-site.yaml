AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a static site

Parameters:
    DomainName:
        Type: String
    Prefix:
        Type: String
    CertificateManagerArn:
        Type: String

Resources:


        # LambdaConfigurations:
        #   - Event: 's3:ObjectCreated:*'
        #     Filter:
        #       S3Key:
        #         Rules:
        #           - Name: prefix
        #             Value: test/
        #           - Name: suffix
        #             Value: .txt
        #     Function: !GetAtt Lambda.Arn

    TranscodeFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: lambda.amazonaws.com
                      Action:
                        - sts:AssumeRole
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

    S3InvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref TranscodeFunction
            Principal: s3.amazonaws.com
            SourceArn: !Sub ${S3Bucket.Arn}
            SourceAccount: !Ref AWS::AccountId

    TranscodeFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub "${Prefix}-transcode-function"
            Code:
              ZipFile: |
                import boto3
                import subprocess

                s3 = boto3.client('s3')

                def lambda_handler(event, context):
                    # Get the object from the event and show its content type
                    bucket = event['Records'][0]['s3']['bucket']['name']
                    key = event['Records'][0]['s3']['object']['key']
                    response = s3.get_object(Bucket=bucket, Key=key)
                    content_type = response['ContentType']

                    # Use FFmpeg to transcode the video
                    input_path = f's3://{bucket}/{key}'
                    output_path = f's3://{bucket}/transcoded/{key}'
                    subprocess.run(['ffmpeg', '-i', input_path, '-c:v', 'libx264', '-preset', 'slow', '-crf', '22', '-c:a', 'copy', output_path])

            Handler: index.lambda_handler
            Runtime: python3.8
            Role: !GetAtt TranscodeFunctionRole.Arn

    S3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            BucketName: !Sub "${DomainName}"
            BucketEncryption:
                ServerSideEncryptionConfiguration: 
                - ServerSideEncryptionByDefault: 
                    SSEAlgorithm: AES256
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            NotificationConfiguration:
                LambdaConfigurations:
                    - Event: 's3:ObjectCreated:*'
                      Function: !GetAtt TranscodeFunction.Arn
                    #   Filter:
                    #     S3Key:
                    #         Rules:
                    #             - Name: Suffix
                    #               Value: ".mp4"
                    #             - Name: Prefix
                    #               Value: "test-"

    S3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: "Grant CloudFront Origin Access Control access to S3 bucket"
                      Effect: "Allow"
                      Action: "s3:GetObject"
                      Resource: !Sub ${S3Bucket.Arn}/*
                      Principal:
                        Service: cloudfront.amazonaws.com
                      Condition:
                        StringEquals:
                            AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
                    - Effect: Deny
                      Principal: "*"
                      Action: "s3:*"
                      Resource: !Sub ${S3Bucket.Arn}/*
                      Condition:
                        Bool:
                            "aws:SecureTransport": false

    CloudFrontOriginAccessControl:
        Type: AWS::CloudFront::OriginAccessControl
        Properties: 
            OriginAccessControlConfig:
                Description: Default Origin Access Control
                Name: !Ref DomainName
                SigningBehavior: always
                SigningProtocol: sigv4
                OriginAccessControlOriginType: s3
    
    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        DependsOn: S3Bucket
        Properties:
            DistributionConfig:
                Aliases:
                    - !Ref DomainName
                    - !Sub "www.${DomainName}"
                CustomErrorResponses:
                    - ErrorCachingMinTTL: 60
                      ErrorCode: 404
                      ResponseCode: 404
                      ResponsePagePath: "/404.html"
                    - ErrorCachingMinTTL: 60
                      ErrorCode: 403
                      ResponseCode: 403
                      ResponsePagePath: "/404.html"
                    - ErrorCachingMinTTL: 5
                      ErrorCode: 503
                      ResponseCode: 503
                      ResponsePagePath: "/503.html"
                DefaultCacheBehavior:
                    AllowedMethods:
                        - GET
                        - HEAD
                    CachedMethods:
                        - GET
                        - HEAD
                    Compress: true
                    DefaultTTL: 3600
                    ForwardedValues:
                        Cookies:
                            Forward: none
                        QueryString: true
                    MaxTTL: 31536000
                    MinTTL: 0
                    SmoothStreaming: false
                    TargetOriginId: !Sub "${DomainName}"
                    ViewerProtocolPolicy: redirect-to-https
                    FunctionAssociations:
                        - EventType: viewer-request
                          FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
                DefaultRootObject: index.html
                Enabled: true
                HttpVersion: http2
                IPV6Enabled: true
                Origins:
                    - DomainName: !Sub "${DomainName}.s3.${AWS::Region}.amazonaws.com"
                      Id: !Sub "${DomainName}"
                      S3OriginConfig:
                        OriginAccessIdentity: ''
                      OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
                # there are PriceClass_ALL or PriceClass_200/_100
                PriceClass: PriceClass_100
                ViewerCertificate:
                    AcmCertificateArn: !Ref CertificateManagerArn
                    MinimumProtocolVersion: TLSv1.2_2021
                    SslSupportMethod: sni-only

    RedirectFunction:
        Type: AWS::CloudFront::Function
        Properties:
            AutoPublish: true
            Name: !Sub "${AWS::StackName}-redirects"
            FunctionConfig:
                Comment: !Sub "Redirect to www.${DomainName}"
                Runtime: cloudfront-js-1.0      
            FunctionCode: |
                // This function redirects incoming requests to the equivalent URL with "www." in the host header
                
                function handler(event) {
                    try {
                        // Extract the incoming request from the event object
                        var request = event.request;

                        // Extract the host header from the request object
                        var host = request.headers.host.value;

                        // Extract the path from the request object
                        var path = request.uri;

                        // If the host header doesn't start with "www.", redirect to the equivalent URL with "www."
                        if (!host.startsWith("www.")) {
                            return {
                                statusCode: 301,
                                statusDescription: "Permanently moved",
                                headers: {
                                    location: {
                                        value: "https://www." + host + path,
                                    },
                                },
                            };
                        }

                        return request;
                    } catch (err) {
                        console.error(err);

                        // If an error occurs, return an appropriate error response
                        var errorStatusCode;
                        var errorStatusDescription;
                        var errorBody;

                        // Check the type of error and set appropriate error response values
                        if (err instanceof Error) {
                            errorStatusCode = 500;
                            errorStatusDescription = "Internal Server Error";
                            errorBody = "An error occurred: " + err.message;
                        } else {
                            errorStatusCode = 400;
                            errorStatusDescription = "Bad Request";
                            errorBody = "Bad Request: " + JSON.stringify(err);
                        }

                        return {
                            statusCode: errorStatusCode,
                            statusDescription: errorStatusDescription,
                            headers: {
                                "content-type": {
                                    value: "text/plain"
                                },
                            },
                            body: "An error occurred: " + errorBody,
                        };
                    }
                }

    Route53RecordSetGroup:
        Type: AWS::Route53::RecordSetGroup
        Properties:
            # Keep the . suffix
            HostedZoneName: !Sub "${DomainName}."
            RecordSets:
                - Name: !Ref DomainName
                  Type: A
                  AliasTarget:
                      DNSName: !GetAtt CloudFrontDistribution.DomainName
                      # Set EvaluateTargetHealth to false to avoid health check issues
                      EvaluateTargetHealth: false
                      # Leave hardcoded, don't confuse w/ !Ref HostedZoneId
                      HostedZoneId: Z2FDTNDATAQYW2 
                - Name: !Sub "www.${DomainName}"
                  Type: A
                  AliasTarget:
                      DNSName: !GetAtt CloudFrontDistribution.DomainName
                      EvaluateTargetHealth: false
                      HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  DistributionId:
    Value: !Ref CloudFrontDistribution
    Export:
      Name: "CloudFrontDistributionId"