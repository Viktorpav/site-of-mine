AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a static site

Parameters:
    DomainName:
        Description: Domain name
        Type: String
    CertificateManagerArn:
        Description: Certificate locater
        Type: String

Resources:
    S3Bucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            BucketName: !Sub "${DomainName}"
            BucketEncryption:
                ServerSideEncryptionConfiguration: 
                - ServerSideEncryptionByDefault: 
                    SSEAlgorithm: AES256
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true
            LoggingConfiguration:
                DestinationBucketName: !Ref AccessLogBucket
                LogFilePrefix: origin/

    S3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: "Grant CloudFront Origin Access Control access to S3 bucket"
                      Effect: "Allow"
                      Action: "s3:GetObject"
                      Resource: !Sub ${S3Bucket.Arn}/*
                      Principal:
                        Service: cloudfront.amazonaws.com
                      Condition:
                        StringEquals:
                            AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
                    # - Sid: "Add MP4 MIME type"
                    #   Effect: "Allow"
                    #   Action: "s3:GetObject"
                    #   Resource: !Sub "${S3Bucket.Arn}/video/*"
                    #   Principal:
                    #     AWS: "*"
                    #   Condition:
                    #     StringEquals:
                    #         "s3:ExistingObjectContentType": "video/mp4"
                    - Effect: Deny
                      Principal: "*"
                      Action: "s3:*"
                      Resource: !Sub ${S3Bucket.Arn}/*
                      Condition:
                        Bool:
                            "aws:SecureTransport": false

    AccessLogBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            AccessControl: LogDeliveryWrite
            BucketEncryption:
                ServerSideEncryptionConfiguration: 
                - ServerSideEncryptionByDefault: 
                    SSEAlgorithm: AES256
            LifecycleConfiguration:
                Rules:
                  - Id: Retain2yrs
                    Status: Enabled
                    ExpirationInDays: 730
                    Transitions:
                      - StorageClass: STANDARD_IA
                        TransitionInDays: 30
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    AccessLogBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref AccessLogBucket
            PolicyDocument:
                Statement:
                  - Effect: Deny
                    Principal: '*'
                    Action: 's3:*'
                    Resource: 
                      - !Sub ${AccessLogBucket.Arn}/*
                      - !GetAtt AccessLogBucket.Arn
                    Condition:
                      Bool: 
                        aws:SecureTransport: false

    CloudFrontOriginAccessControl:
        Type: AWS::CloudFront::OriginAccessControl
        Properties: 
            OriginAccessControlConfig:
                Description: Default Origin Access Control
                Name: !Ref DomainName
                SigningBehavior: always
                SigningProtocol: sigv4
                OriginAccessControlOriginType: s3
    
    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        DependsOn: S3Bucket
        Properties:
            DistributionConfig:
                Aliases:
                    - !Ref DomainName
                    - !Sub "www.${DomainName}"
                CustomErrorResponses:
                    - ErrorCachingMinTTL: 60
                      ErrorCode: 404
                      ResponseCode: 404
                      ResponsePagePath: "/404.html"
                DefaultCacheBehavior:
                    AllowedMethods:
                        - GET
                        - HEAD
                    CachedMethods:
                        - GET
                        - HEAD
                    Compress: true
                    DefaultTTL: 3600
                    ForwardedValues:
                        Cookies:
                            Forward: none
                        QueryString: true
                    MaxTTL: 31536000
                    MinTTL: 0
                    SmoothStreaming: false
                    TargetOriginId: !Sub "${DomainName}"
                    ViewerProtocolPolicy: redirect-to-https
                    FunctionAssociations:
                        - EventType: viewer-request
                          FunctionARN: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
                DefaultRootObject: index.html
                Enabled: true
                HttpVersion: http2
                IPV6Enabled: true
                Origins:
                    - DomainName: !Sub "${DomainName}.s3.${AWS::Region}.amazonaws.com"
                      Id: !Sub "${DomainName}"
                      S3OriginConfig:
                        OriginAccessIdentity: ''
                      OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
                # there are PriceClass_ALL or PriceClass_200/_100
                PriceClass: PriceClass_100
                ViewerCertificate:
                    AcmCertificateArn: !Ref CertificateManagerArn
                    MinimumProtocolVersion: TLSv1.2_2021
                    SslSupportMethod: sni-only
                Logging:
                    Bucket: !GetAtt AccessLogBucket.DomainName
                    IncludeCookies: false
                    Prefix: cloudfront/

    RedirectFunction:
        Type: AWS::CloudFront::Function
        Properties:
            AutoPublish: true
            Name: !Sub "${AWS::StackName}-redirects"
            # add the config, even if optional, the stack creation will thrown InternalFailure error otherwise
            FunctionConfig:
                Comment: !Sub "Redirect to www.${DomainName}"
                Runtime: cloudfront-js-1.0      
            FunctionCode: |
                // This function redirects incoming requests to the equivalent URL with "www." in the host header

                function handler(event) {
                  try {
                    // Extract the incoming request from the event object
                    var request = event.request;
                    
                    // Extract the host header from the request object
                    var host = request.headers.host.value;

                    // Extract the path from the request object
                    var path = request.uri;

                    // If the host header doesn't start with "www.", redirect to the equivalent URL with "www."
                    if (!host.startsWith("www.")) {
                        return {
                            statusCode: 301,
                            statusDescription: "Permanently moved",
                            headers: {
                                location: { value: "https://www." + host + path },
                            },
                        };
                    }

                    return request;
                  } catch (err) {
                    console.error(err);

                    // If an error occurs, return an appropriate error response
                    var errorStatusCode;
                    var errorStatusDescription;
                    var errorBody;

                    // Check the type of error and set appropriate error response values
                    if (err instanceof Error) {
                        errorStatusCode = 500;
                        errorStatusDescription = "Internal Server Error";
                        errorBody = "An error occurred: " + err.message;
                    } else {
                        errorStatusCode = 400;
                        errorStatusDescription = "Bad Request";
                        errorBody = "Bad Request: " + JSON.stringify(err);
                    }

                    return {
                        statusCode: errorStatusCode,
                        statusDescription: errorStatusDescription,
                        headers: {
                            "content-type": { value: "text/plain" },
                        },
                        body: "An error occurred: " + errorBody,
                    };
                  }
                }

    Route53RecordSetGroup:
        Type: AWS::Route53::RecordSetGroup
        Properties:
            # Keep the . suffix
            HostedZoneName: !Sub "${DomainName}."
            RecordSets:
                - Name: !Ref DomainName
                  Type: A
                  AliasTarget:
                      DNSName: !GetAtt CloudFrontDistribution.DomainName
                      # Set EvaluateTargetHealth to false to avoid health check issues
                      EvaluateTargetHealth: false
                      # Leave hardcoded, don't confuse w/ !Ref HostedZoneId
                      HostedZoneId: Z2FDTNDATAQYW2 
                - Name: !Sub "www.${DomainName}"
                  Type: A
                  AliasTarget:
                      DNSName: !GetAtt CloudFrontDistribution.DomainName
                      EvaluateTargetHealth: false
                      HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  DistributionId:
    Value: !Ref CloudFrontDistribution
    Export:
      Name: "CloudFrontDistributionId"

  EnvironmentVariables:
    Value: !Sub |
      {
        "DomainName": "${DomainName}"
      }
    Export:
      Name: "EnvironmentVariables"